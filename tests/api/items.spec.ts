// tests/api/items.spec.ts
import { test, expect } from '../fixtures/auth.fixture';

const newItem = () => ({
name: `Test item ${Date.now()}`,
  description: 'autogenerated description'
});

test.describe('Items API', () => {
  let createdId: string;

  test('GET /items (empty or list)', async ({ api, authToken, itemsPath }) => {
    const res = await api.get(itemsPath, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    expect(res.ok()).toBeTruthy();
    const body = await res.json();
    expect(Array.isArray(body)).toBe(true);
  });

  test('POST /items', async ({ api, authToken, itemsPath }) => {
    const item = newItem();
    const res = await api.post(itemsPath, {
      headers: { Authorization: `Bearer ${authToken}` },
      data: item
    });
    expect(res.status()).toBe(201);
    const body = await res.json();
    expect(body.name).toBe(item.name);
    createdId = body.id;
  });

  test('PUT /items/:id', async ({ api, authToken, itemsPath }) => {
    const res = await api.put(`${itemsPath}/${createdId}`, {
      headers: { Authorization: `Bearer ${authToken}` },
      data: { name: 'Updated Title' }
    });
    expect(res.status()).toBe(200);
    const body = await res.json();
    expect(body.name).toBe('Updated Title');
  });

  test('DELETE /items/:id', async ({ api, authToken, itemsPath }) => {
    const res = await api.delete(`${itemsPath}/${createdId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    expect(res.status()).toBe(204);
  });

  test('negative: DELETE wrong id', async ({ api, authToken, itemsPath }) => {
    const res = await api.delete(`${itemsPath}/does-not-exist`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    expect(res.status()).toBe(404);
  });
});
